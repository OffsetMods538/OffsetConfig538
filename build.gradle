import java.nio.file.Files

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

ext {
    version_prefix = rootProject.project_version
    if (!Boolean.parseBoolean(System.getenv("IS_RELEASE"))) {
        String preReleaseVersion = System.currentTimeSeconds()

        if (Boolean.parseBoolean(System.getenv("PRESERVE_PRERELEASE_VERSION"))) {
            var preReleaseVersionFile = file("preReleaseVersion.txt").toPath()
            if (Files.exists(preReleaseVersionFile)) preReleaseVersion = Files.readString(preReleaseVersionFile)
            Files.writeString(preReleaseVersionFile, preReleaseVersion)
        }

        var separator = "-"
        if (version.contains("-")) separator = "."
        version_prefix = "${version_prefix}${separator}${preReleaseVersion}"
    }
    final String versionSuffix = System.getenv("VERSION_SUFFIX")
    if (versionSuffix != null && !versionSuffix.isEmpty()) {
        version_prefix = "${version_prefix}+${versionSuffix}"
    }

    System.out.println("Version: ${version_prefix}")
}

version = rootProject.version_prefix

repositories {
    mavenCentral()
}

dependencies {
    api "blue.endless:jankson:${project.jankson_version}"

    testCompileOnly compileOnly("org.jetbrains:annotations:${project.jetbrains_annotations_version}")


    testImplementation platform("org.junit:junit-bom:${project.junit_version}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

test {
    useJUnitPlatform()
}

jar {
    from("LICENSE") {
        rename { "${it}" }
    }
}

tasks.named("javadoc", Javadoc) {
    options.addFileOption('-add-stylesheet', rootProject.file("javadoc-stylesheet.css"))
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

publishing {
    repositories {
        maven {
            name = "OffsetMods538"
            url = "https://maven.offsetmonkey538.top/releases"
            credentials {
                username = providers.gradleProperty("OffsetMods538Username").getOrElse(System.getenv("MAVEN_USERNAME"))
                password = providers.gradleProperty("OffsetMods538Password").getOrElse(System.getenv("MAVEN_PASSWORD"))
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = base.archivesName.get()

            from components.java
        }
    }
}
